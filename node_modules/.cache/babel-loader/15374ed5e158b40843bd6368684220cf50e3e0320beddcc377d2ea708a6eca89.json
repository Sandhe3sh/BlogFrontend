{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for backend\nconst API_BASE_URL = 'http://localhost:8089/api,';\n\n// Create Axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add JWT token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor for logging\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: (email, password) => api.post('/auth/login', {\n    email,\n    password\n  }),\n  register: (email, password) => api.post('/auth/register', {\n    email,\n    password\n  })\n};\n\n// Blog API\nexport const blogAPI = {\n  getBlogs: (page = 0, size = 10) => api.get(`/blogs?page=${page}&size=${size}`),\n  getBlog: id => api.get(`/blogs/${id}`),\n  createBlog: (title, content) => {\n    if (!title || !content) {\n      return Promise.reject({\n        message: 'Title and content are required'\n      });\n    }\n    return api.post('/blogs', {\n      title,\n      content\n    });\n  },\n  updateBlog: (id, title, content) => {\n    if (!title || !content) {\n      return Promise.reject({\n        message: 'Title and content are required'\n      });\n    }\n    return api.put(`/blogs/${id}`, {\n      title,\n      content\n    });\n  },\n  deleteBlog: id => api.delete(`/blogs/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","console","data","message","authAPI","login","email","password","post","register","blogAPI","getBlogs","page","size","get","getBlog","id","createBlog","title","content","updateBlog","put","deleteBlog","delete"],"sources":["C:/Users/vishnu/OneDrive/Learnthon 2024/blog/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for backend\nconst API_BASE_URL = 'http://localhost:8089/api,';\n\n// Create Axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add JWT token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Response interceptor for logging\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: (email, password) => api.post('/auth/login', { email, password }),\n  register: (email, password) => api.post('/auth/register', { email, password }),\n};\n\n// Blog API\nexport const blogAPI = {\n  getBlogs: (page = 0, size = 10) => api.get(`/blogs?page=${page}&size=${size}`),\n  getBlog: (id) => api.get(`/blogs/${id}`),\n  \n  createBlog: (title, content) => {\n    if (!title || !content) {\n      return Promise.reject({ message: 'Title and content are required' });\n    }\n    return api.post('/blogs', { title, content });\n  },\n\n  updateBlog: (id, title, content) => {\n    if (!title || !content) {\n      return Promise.reject({ message: 'Title and content are required' });\n    }\n    return api.put(`/blogs/${id}`, { title, content });\n  },\n\n  deleteBlog: (id) => api.delete(`/blogs/${id}`),\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,4BAA4B;;AAEjD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAb,GAAG,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACTC,OAAO,CAACL,KAAK,CAAC,YAAY,EAAE,EAAAI,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,IAAI,KAAIN,KAAK,CAACO,OAAO,CAAC;EAClE,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMQ,OAAO,GAAG;EACrBC,KAAK,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KAAKxB,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAE;IAAEF,KAAK;IAAEC;EAAS,CAAC,CAAC;EACxEE,QAAQ,EAAEA,CAACH,KAAK,EAAEC,QAAQ,KAAKxB,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAE;IAAEF,KAAK;IAAEC;EAAS,CAAC;AAC/E,CAAC;;AAED;AACA,OAAO,MAAMG,OAAO,GAAG;EACrBC,QAAQ,EAAEA,CAACC,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,EAAE,KAAK9B,GAAG,CAAC+B,GAAG,CAAC,eAAeF,IAAI,SAASC,IAAI,EAAE,CAAC;EAC9EE,OAAO,EAAGC,EAAE,IAAKjC,GAAG,CAAC+B,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EAExCC,UAAU,EAAEA,CAACC,KAAK,EAAEC,OAAO,KAAK;IAC9B,IAAI,CAACD,KAAK,IAAI,CAACC,OAAO,EAAE;MACtB,OAAOtB,OAAO,CAACC,MAAM,CAAC;QAAEK,OAAO,EAAE;MAAiC,CAAC,CAAC;IACtE;IACA,OAAOpB,GAAG,CAACyB,IAAI,CAAC,QAAQ,EAAE;MAAEU,KAAK;MAAEC;IAAQ,CAAC,CAAC;EAC/C,CAAC;EAEDC,UAAU,EAAEA,CAACJ,EAAE,EAAEE,KAAK,EAAEC,OAAO,KAAK;IAClC,IAAI,CAACD,KAAK,IAAI,CAACC,OAAO,EAAE;MACtB,OAAOtB,OAAO,CAACC,MAAM,CAAC;QAAEK,OAAO,EAAE;MAAiC,CAAC,CAAC;IACtE;IACA,OAAOpB,GAAG,CAACsC,GAAG,CAAC,UAAUL,EAAE,EAAE,EAAE;MAAEE,KAAK;MAAEC;IAAQ,CAAC,CAAC;EACpD,CAAC;EAEDG,UAAU,EAAGN,EAAE,IAAKjC,GAAG,CAACwC,MAAM,CAAC,UAAUP,EAAE,EAAE;AAC/C,CAAC;AAED,eAAejC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}